#!/usr/bin/env python3

import hmac, base64, struct, hashlib, time, sys, os, json

def get_hotp_token(secret, intervals_no, token_length=6):
    key = base64.b32decode(secret, True)
    msg = struct.pack(">Q", intervals_no)
    hmac_digest = hmac.new(key, msg, hashlib.sha1).digest()
    o = hmac_digest[19] & 15
    token_base = struct.unpack(">I", hmac_digest[o:o + 4])[0] & 0x7fffffff
    token = token_base % (10 ** token_length)
    # Добиваем нулями слева, если короче 6 символов
    return '{{:0{}d}}'.format(token_length).format(token)

def get_totp_token(secret):
    return get_hotp_token(secret, intervals_no=int(time.time())//30)

if __name__ == "__main__":
    secret_file = os.path.expanduser('~/.google_authenticator')
    with open(secret_file, 'r+') as f:
        conf = json.load(f)
        print("{}{}".format(conf['pincode'], get_totp_token(conf['secret'])))

