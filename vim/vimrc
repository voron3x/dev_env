""""""""""""""""""""
" => General
""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugin
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

set shell=/bin/bash

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" Fast editing of the .vimrc
map <leader>e :e! ~/.vimrc<cr>

" When vimrc is edited, reload it
autocmd! bufwritepost vimrc source ~/.vim_runtime/vimrc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the curors - when moving vertical..
set so=7

set wildmenu "Turn on WiLd menu

set hid "Change buffer - without saving

" Set backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase "Ignore case when searching
set smartcase

" Показывать незавершенные команды в статусбаре
set showcmd

" Нумерация строк
set number

set hlsearch "Highlight search things

set incsearch "Make search act like search in modern browsers
set nolazyredraw "Don't redraw while executing macros 

set magic "Set magic on, for regular expressions

set showmatch "Show matching bracets when text indicator is over them
set mat=2 "How many tenths of a second to blink

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Не переносить строки
set nowrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on "Enable syntax hl

" Шрифт
"set gfn=DejaVu\ Sans\ Mono\ 6
set gfn=Monospace\ 10

" Включаем 256 цветов
set t_Co=256

if has("gui_running")
  set guioptions-=T
  set background=dark
  colorscheme wombat
else
  " Включаем 256 цветов
  set t_Co=256
  colorscheme wombat
  set background=dark

endif

" Список кодировок файлов для автоопределения
set fileencodings=utf-8
set encoding=utf8
try
    lang ru_RU
catch
endtry

set ffs=unix,dos,mac "Default file types


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

"Persistent undo
try
    set undodir=~/.vim/undodir
    set undofile
catch
endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Преобразовать Таба в пробелы
set expandtab
" Размер табуляции по умолчанию
set shiftwidth=4
set tabstop=4
set smarttab

set lbr
set tw=500

set ai "Auto indent
set si "Smart indet
set wrap "Wrap lines

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Really useful!
"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>


function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

" From an idea by Michael Naumann
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command mode related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
cno $h e ~/
cno $d e ~/Desktop/
cno $j e ./
cno $c e <C-\>eCurrentFileDir("e")<cr>

" $q is super useful when browsing on the command line
cno $q <C-\>eDeleteTillSlash()<cr>

" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" Useful on some European keyboards
map ½ $
imap ½ $
vmap ½ $
cmap ½ $


func! Cwd()
  let cwd = getcwd()
  return "e " . cwd 
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if MySys() == "linux" || MySys() == "mac"
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if MySys() == "linux" || MySys() == "mac"
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif
  return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map space to / (search) and c-space to ? (backgwards search)
map <space> /
map <c-space> ?
map <silent> <leader><cr> :noh<cr>

" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,300 bd!<cr>

" Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>

" Tab configuration
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>


command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Specify the behavior when switching between buffers 
try
  set switchbuf=usetab
  set stal=2
catch
endtry


""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" Always hide the statusline
set laststatus=2

" Format the statusline
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c


function! CurDir()
    let curdir = substitute(getcwd(), '/home/voron3x/', "~/", "g")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    else
        return ''
    endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a"<esc>`<i"<esc>

" Map auto complete of (, ", ', [
inoremap $1 ()<esc>i
inoremap $2 []<esc>i
inoremap $3 {}<esc>i
inoremap $4 {<esc>o}<esc>O
inoremap $q ''<esc>i
inoremap $e ""<esc>i
inoremap $t <><esc>i


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrevs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Remap VIM 0
map 0 ^

"Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

"Delete trailing white space, useful for Python ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

set guitablabel=%t


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Cope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Do :help cope if you are unsure what cope is. It's super useful!
map <leader>cc :botright cope<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>


""""""""""""""""""""""""""""""
" => bufExplorer plugin
""""""""""""""""""""""""""""""
let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
map <leader>o :BufExplorer<cr>

"""""""""""""""""""""""""""""
" => TagList plugin for ctags 
"""""""""""""""""""""""""""""
map <leader>tl :TlistToggle<cr>

"""""""""""""""""""""""""""""
" => NERDTree plugin
"""""""""""""""""""""""""""""
map <leader>z :NERDTreeToggle<cr>


""""""""""""""""""""""""""""""
" => Minibuffer plugin
""""""""""""""""""""""""""""""
let g:miniBufExplModSelTarget = 1
let g:miniBufExplorerMoreThanOne = 2
let g:miniBufExplModSelTarget = 0
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplVSplit = 25
let g:miniBufExplSplitBelow=1

let g:bufExplorerSortBy = "name"

autocmd BufRead,BufNew :call UMiniBufExplorer

map <leader>u :TMiniBufExplorer<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni complete functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType css set omnifunc=csscomplete#CompleteCSS


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


""""""""""""""""""""""""""""""
" => Python section
""""""""""""""""""""""""""""""
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au FileType python inoremap <buffer> $r return
au FileType python inoremap <buffer> $i import
au FileType python inoremap <buffer> $p print
au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
au FileType python map <buffer> <leader>1 /class
au FileType python map <buffer> <leader>2 /def
au FileType python map <buffer> <leader>C ?class
au FileType python map <buffer> <leader>D ?def


""""""""""""""""""""""""""""""
" => JavaScript section
"""""""""""""""""""""""""""""""
au FileType javascript call JavaScriptFold()
au FileType javascript setl fen
au FileType javascript setl nocindent

au FileType javascript imap <c-t> AJS.log();<esc>hi
au FileType javascript imap <c-a> alert();<esc>hi

au FileType javascript inoremap <buffer> $r return
au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi

function! JavaScriptFold()
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction


""""""""""""""""""""""""""""""
" => MRU plugin
""""""""""""""""""""""""""""""
let MRU_Max_Entries = 400
map <leader>f :MRU<CR>


""""""""""""""""""""""""""""""
" => Command-T
""""""""""""""""""""""""""""""
let g:CommandTMaxHeight = 15
set wildignore+=*.o,*.obj,.git,*.pyc
noremap <leader>j :CommandT<cr>
noremap <leader>y :CommandTFlush<cr>


""""""""""""""""""""""""""""""
" => Vim grep
""""""""""""""""""""""""""""""
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=/bin/grep\ -nH



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>
au BufRead,BufNewFile ~/buffer iab <buffer> xh1 ===========================================

map <leader>pp :setlocal paste!<cr>

map <leader>bb :cd ..<cr>

"""""""""""""""OLDDD

"" Ширина строки команд в одну строку
"set ch=1
"" Настройка резервных копий файлов
"set nobackup
"" set noswapfile
"" set backup
"" set backupdir=~/.bak
"" Фолдинг по отступам
""set foldmethod=indent
"" Поиск по набору текста
"set incsearch
"" Подсветки найденных вариантов поиска
"set nohlsearch
"" Не выгружать буфер когда переключаешься на другой
"set hidden
"" Скрыть панель в gui версии
"set guioptions-=T
"
"" Включить автоотступы
"set autoindent
""Умные" отступы (например, автоотступ после {)
"set smartindent
"
""set softtabstop=4
"
"" Формат строки состояния
"set statusline=%<%f%h%m%r\ %b\ %{&encoding}-%{&fileencoding}\ 0x\ \ %l,%c%V\ %P
"set laststatus=2
"
"" Опции сессии
"set sessionoptions=curdir,buffers,tabpages
""Устанавливаем набор языков для проврки орфографий
""включаю/выключаю проверку просто через :set spell и :set nospell z= заменить
""слово
"set spelllang=ru_yo,en_us
"
"" TLIST
"let Tlist_Exit_OnlyWindow = 1 " exit if taglist is last window open
"" Настройки для Tlist (показвать только текущий файл в окне навигации по  коду)
"let g:Tlist_Show_One_File = 1
"
"" Настойки если запущен GUI
"if has("gui_running")
"  set guifont=DejaVu\ Sans\ Mono\ 11
"  "let &guicursor = &guicursor . ",a:blinkon0"
"  set lines=40
"  set columns=100
"  set guioptions-=T
"  set guioptions-=r
"  set cursorline
"  colorscheme wombat
"endif
"
"" Настраиваем переключение раскладок клавиатуры по
"set keymap=russian-jcukenwin
"" Раскладка по умолчанию - английская
"set iminsert=0
"set imsearch=0
""Подсвечиваем курсок когда выбрана русская раскладка
"highlight lCursor guifg=NONE guibg=Cyan
"
"" Просмотр нетекстовых файлов в Vim -->
"au BufReadPost *.pdf silent %!pdftotext -nopgbrk "%" - |fmt -csw78
"au BufReadPost *.doc silent %!antiword "%"
"au BufReadPost *.odt silent %!odt2txt "%"
"" Просмотр нетекстовых файлов в Vim <--
"
"" SRC explorer config
"" // The switch of the Source Explorer                                         "
"" nmap <F8> :SrcExplToggle<CR>
""                                                                              "
"" // Set the height of Source Explorer window                                  "
"" let g:SrcExpl_winHeight = 8
""                                                                              "
"" // Set 100 ms for refreshing the Source Explorer                             "
"" let g:SrcExpl_refreshTime = 100
""                                                                              "
"" // Set "Enter" key to jump into the exact definition context                 "
"" let g:SrcExpl_jumpKey = "<ENTER>"
""                                                                              "
"" // Set "Space" key for back from the definition context                      "
"" let g:SrcExpl_gobackKey = "<SPACE>"
""                                                                              "
"" // In order to Avoid conflicts, the Source Explorer should know what plugins "
"" // are using buffers. And you need add their bufname into the list below     "
"" // according to the command ":buffers!"                                      "
"let g:SrcExpl_pluginList = [
"        \ "__Tag_List__",
"        \ "_NERD_tree_",
"        \ "Source_Explorer"
"    \ ]
""                                                                              "
"" // Enable/Disable the local definition searching, and note that this is not  "
"" // guaranteed to work, the Source Explorer doesn't check the syntax for now. "
"" // It only searches for a match with the keyword according to command 'gd'   "
"" let g:SrcExpl_searchLocalDef = 1
""                                                                              "
"" // Do not let the Source Explorer update the tags file when opening          "
"" let g:SrcExpl_isUpdateTags = 0
""                                                                              "
"" // Use program 'ctags' with argument '--sort=foldcase -R' to create or       "
"" // update a tags file                                                        "
"" let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
"" let g:SrcExpl_updateTagsKey = "<F12>"
"
"
""--------------------------
"" ГОРЯЧИЕ КЛАВИШИ
""--------------------------
"
"" Пробел в нормальном режиме перелистывает страницы
"nmap <Space> <PageDown>
"
"" CTRL-F для omni completion
"imap <C-F> <C-X><C-O>
"
"" F2 - быстрое сохранение
"nmap <F2> :w<cr>
"vmap <F2> <esc>:w<cr>
"imap <F2> <esc>:w<cr>
"
"" F3 - просмотр ошибок
"nmap <F3> :open<cr>
"vmap <F3> <esc>:copen<cr>
"imap <F3> <esc>:copen<cr>
"
"" F4 - ctags
"nmap <F4> :TlistToggle<cr>
"vmap <F4> <esc>:TlistToggle<cr>
"imap <F4> <esc>:TlistToggle<cr>
"
"" F5 - просмотр списка буферов
"nmap <F5> <Esc>:BufExplorer<cr>
"vmap <F5> <esc>:BufExplorer<cr>
"imap <F5> <esc><esc>:BufExplorer<cr>
"
"" F6 - предыдущий буфер
"map <F6> :bp<cr>
"vmap <F6> <esc>:bp<cr>i
"imap <F6> <esc>:bp<cr>i
"
"" F7 - следующий буфер
"map <F7> :bn<cr>
"vmap <F7> <esc>:bn<cr>i
"imap <F7> <esc>:bn<cr>i
"
"" F9 - "Explore" команда
"map <F9> :Explore<cr>
"vmap <F9> <esc>:Explore<cr>i
"imap <F9> <esc>:Explore<cr>i
"
"" F10 - удалить буфер
"map <F10> :bd<cr>
"vmap <F10> <esc>:bd<cr>
"imap <F10> <esc>:bd<cr>
"
"" Все три плагина 
"nmap <F8> :TrinityToggleAll<CR>
"
"" F11 - обозреватель исходников
"map <F11> :SrcExplToggle<cr>
"vmap <F11> <esc>:SrcExplToggle<cr>i
"imap <F11> <esc>:SrcExplToggle<cr>i
"
"" F12 - NERDTree
"map <F12> :NERDTreeToggle<cr>
"vmap <F12> <esc>:NERDTreeToggle<cr>i
"imap <F12> <esc>:NERDTreeToggle<cr>i
"
"
"" < & > - делаем отступы для блоков
"vmap < <gv
"vmap > >gv
"
"" Выключаем ненавистный режим замены
"imap >Ins> <Esc>i
"
"" Редко когда надо [ без пары =)
"imap [ []<LEFT>
"" Аналогично и для {
"imap {<CR> {<CR>}<Esc>O
"
"" С-q - выход из Vim
"map <C-Q> <Esc>:qa<cr>
"
"
"" Ускоренное передвижение по тексту
"nmap <C-H> 5h
"nmap <C-J> 5j
"nmap <C-K> 5k
"nmap <C-L> 5l
"                 
"
"" Более привычные Page Up/Down, когда курсор остаётся в той же строке,
"" а не переносится вверх/вниз экрана, как при стандартном
""     PgUp/PgDown.
"" Поскольку по умолчанию прокрутка по C-U/D происходит на
""         полэкрана,
"" привязка делается к двойному нажатию этих комбинаций.
"nmap <PageUp> <C-U><C-U>
"imap <PageUp> <C-O><C-U><C-O><C-U>
"nmap <PageDown> <C-D><C-D>
"imap <PageDown> <C-O><C-D><C-O><C-D>
"
"au BufNewFile,BufRead *.tt setf tt2html
":let b:tt2_syn_tags = '\[% %]'
"
"autocmd FileType python set omnifunc=pythoncomplete#Complete
"autocmd FileType tt2html set omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
"autocmd FileType css set omnifunc=csscomplete#CompleteCSS
"autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
"autocmd FileType php set omnifunc=phpcomplete#CompletePHP
"autocmd FileType c set omnifunc=ccomplete#Complete
